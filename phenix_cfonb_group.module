<?php 

use \Drupal\views\Views;
/**
 * Implements hook_preprocess_page().
 */
function phenix_cfonb_group_preprocess_page(&$variables)
{
  $variables['#attached']['library'][] = 'phenix_cfonb_group/phenix_cfonb_group';
  $current_path = \Drupal::service('path.current')->getPath();
  if (strpos($current_path, '/feuille-de-presence/') !== false) {

    // Replace 'your_view_name' with the machine name of your view.
    $view_name = 'attendance_sheet';

    // Replace 'your_view_name' with the machine name of your view.

    // Replace 'your_display_id' with the machine name of the display you want to print.
    $display_id = 'attendance_sheet_edit';
    // Load the view.
    $view = Views::getView($view_name);

    // Check if the view exists.
    if ($view) {
      // Set the display ID.
      $view->setDisplay($display_id);


      // Execute the view.
      $view->preExecute();
      $view->execute();

      // Print the view programmatically.
      $html = render($view->render());
      $view->args['data-views'] = $html;
      // dump($view->footer);
      $current_area_footer = $view->args['area']->options['content']['value'];
      if ($view->args['area']) {
        $view->args['area']->options['content']['value'] = '<a id="printerParticipants" data-content-to-print="' . $html . '"  onclick="window.print()"  href="#" >Imprimer la liste</a>';
      }
    }
  }

}



use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_view().
 */
function phenix_cfonb_group_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Check if it's the view you want to alter.
  if ($view->id() == 'attendance_sheet' && $display_id == 'attendance_sheet_edit') {


    // Replace 'your_view_name' with the machine name of your view.
    $view_name = 'attendance_sheet';

    // Replace 'your_view_name' with the machine name of your view.

    // Replace 'your_display_id' with the machine name of the display you want to print.
    $display_id = 'attendance_sheet_edit';

    // // Load the view.
    // $viewc = Views::getView($view_name);

    // Check if the view exists.
    $html = render($view->render())->__toString();  
    $html = str_replace('views-field views-field-edit-civicrm-participant', 'hidden', $html);
    $html = str_replace('views-field views-field-views-bulk-operations-bulk-form', 'hidden', $html);
    $html = str_replace('views-field views-field-register-date', 'hidden', $html);
    // dump($html);
    $html = str_replace('<table', '<table style="table {width: 100% !important; height: 2100px !important; border-collapse: collapse;width: 100%;margin-bottom: 1rem;border-radius: 3px;}" ', $html);
    // dump($html);
    $html = htmlspecialchars($html);
    $view->attachment_after['#markup'] = '<footer><a id="printerParticipants" data-content-to-print="' . $html. '"  href="#" >Imprimer la liste</a></footer>';
  }
}


/**
 * Implements hook_form_alter().
 */
function phenix_cfonb_group_form_alter (&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'phenix_cfonb_group/phenix_cfonb_group';

  /**
   * Ajout custom text au dessus des boutons actions, soit "exuser" ou "exporter (excel)"
   */
  // dump($form['#form_id']);views_form_attendance_sheet_attendance_sheet_edit_2879
  if (strpos($form['#form_id'], "views_form_attendance_sheet_attendance_sheet") !== false || (strpos($form['#form_id'], 'views_form_civi_groupe_evenements_page') !== false)) {
    
    $custom_text = '« Les participants à la présente réunion reconnaissent avoir reçu le code de conduite qu’ils s’engagent à respecter. »';
    foreach($form['header']['views_bulk_operations_bulk_form']['actions'] as $index => $value) {
      if (is_numeric($index)) {
        if (isset($form['header']['views_bulk_operations_bulk_form']['actions'][0])) {
          $form['header']['views_bulk_operations_bulk_form']['actions'][0]['#prefix'] = '<p>' . $custom_text . '</p>';
        }else  if (isset($form['header']['views_bulk_operations_bulk_form']['actions'][2])) {
          $form['header']['views_bulk_operations_bulk_form']['actions'][2]['#prefix'] = '<p>' . $custom_text . '</p>';
        }else  if (isset($form['header']['views_bulk_operations_bulk_form']['actions'][3])) {
          $form['header']['views_bulk_operations_bulk_form']['actions'][3]['#prefix'] = '<p>' . $custom_text . '</p>';
        }else {
          $form['header']['views_bulk_operations_bulk_form']['actions'][4]['#prefix'] = '<p>' . $custom_text . '</p>';
        }
      }
    }


    foreach($form['actions'] as $index => $value) {
      if (is_numeric($index)) {
        if (isset($form['actions'][0])) {
          $form['actions'][0]['#prefix'] = '<p>' . $custom_text . '</p>';
        }else  if (isset($form['actions'][2])) {
          $form['actions'][2]['#prefix'] = '<p>' . $custom_text . '</p>';
        }else  if (isset($form['actions'][3])) {
          $form['actions'][3]['#prefix'] = '<p>' . $custom_text . '</p>';
        }else {
          $form['actions'][4]['#prefix'] = '<p>' . $custom_text . '</p>';
        }
      }
    }


    
    
    if (strpos($form['#form_id'], 'views_form_civi_groupe_evenements_page') !== false) {
      foreach($form['output'] as $index => $value) {
        if (is_numeric($index)) {
          if (isset($form['output'][0])) {
            $form['output'][0]['#prefix'] = '<p>' . $custom_text . '</p>';
          }else  if (isset($form['output'][1])) {
            $form['output'][1]['#prefix'] = '<p>' . $custom_text . '</p>';
          }else if (isset($form['output'][2])) {
            $form['output'][2]['#prefix'] = '<p>' . $custom_text . '</p>';
          }else if (isset($form['output'][3])) {
            $form['output'][3]['#prefix'] = '<p>' . $custom_text . '</p>';
          }else {
            $form['output'][4]['#prefix'] = '<p>' . $custom_text . '</p>';
          }
        }
      }
    }
  }
}



function phenix_cfonb_group_preprocess_views_view_field(&$variables) {
  
  $view = $variables['view'];
  $field = $variables['field'];
  $requests = \Drupal::request();
  $row = $variables['row'];
  if ($view->storage->id() == 'recherche' &&  $view->current_display == 'resultats_recherche') {
    if ($field->field == 'rendered_item') {
      // dump($row);
    }
  }

  if ($view->storage->id() == 'media' &&  $view->current_display == 'media_page_list') {
    if ($field->field == 'name') {
      $title = $field->getValue($row);
      $entity = $row->_entity;
      $file_entity = $entity->field_media_document->entity;
      $mid = getNodeFieldValue($row->_entity, 'mid');
      $idTokenized = base64_encode($mid);
      $filename = getNodeFieldValue($file_entity, 'filename');
      // dump(getNodeFieldValue($row->_entity, 'mid'), $view, $variables['output'] );
      

      $variables['output'] = ['#markup' => '<a href="/media/' . $mid . '/download?token=' . $idTokenized . '"> ' . $filename  . '</p>'];
    }

  }
}

function getNodeFieldValue ($node, $field) {
  $value = '';
  if ($node) {

    $getValue = $node->get($field)->getValue();
    if (!empty($getValue)) {
      if (isset($getValue[0]['target_id'])) { //For entity reference (img / taxonomy ...)
        $value = $getValue[0]['target_id'];
      }elseif (isset($getValue[0]['value']))  { //For simple text / date
        $value = $getValue[0]['value'];
      }else if(isset($getValue[0]['uri'])) {
        $value = $getValue[0]['uri'];
      }else { //other type of field
        
      }
    }
  }
  return $value;
}

/**
 * 
 * Gestion de permission par rapport à l'utilisateur anonyme
 * 
 * Implements hook_entity_access().
 */
function phenix_cfonb_group_media_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  if ($account->isAnonymous()) {
    if (\Drupal::request()->query->get('token')) {//s'il y a du parametre mcd dans le mail on autorise
      $mid = \Drupal::request()->attributes->get('media')->get('mid')->getValue()[0]['value'];
      if ($mid) {
        $idTokenized = base64_encode($mid);
        
        //Vérifie si c'est du bon token
        if ($idTokenized != \Drupal::request()->query->get('token')) {
          return  \Drupal\Core\Access\AccessResult::forbidden(); //commenté pour l'instant car les adherent ne peuvent pas acceder aux telechargement de document si on met "forbidden"
        }
        
        //Vérifie si le document n'est pas resrevé aux adhérents
        if ($entity->hasField('field_document_reserve_aux_adher') && getNodeFieldValue($entity, 'field_document_reserve_aux_adher')) {
          return  \Drupal\Core\Access\AccessResult::forbidden(); //commenté pour l'instant car les adherent ne peuvent pas acceder aux telechargement de document si on met "forbidden"
        }
      }
      return \Drupal\Core\Access\AccessResult::allowed();
    }
    //  return  \Drupal\Core\Access\AccessResult::forbidden(); //commenté pour l'instant car les adherent ne peuvent pas acceder aux telechargement de document si on met "forbidden"
  }
}




/**
 * Ce code sert à afficher 
 * Implements hook_entity_view_alter().
 */
function phenix_cfonb_group_entity_view_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  // Check if the entity is a node and the display is "default".
  if ($entity->getEntityTypeId() === 'civicrm_group'  && $display->getMode() === 'default' ) {
    $title_frontend = $entity->get('frontend_title')->getValue();
    $title_frontend = $title_frontend ? $title_frontend[0]['value'] : '';
    $second_keys = array_keys($build['_layout_builder'][0]['content'])[1];
     
    $build['_layout_builder'][0]['content'][$second_keys]['content'][0]['#context']['value'] = $title_frontend;
  }
}
 

/**
 * Implements hook_views_query_alter().
 */
function phenix_cfonb_group_views_query_alter(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\query\QueryPluginBase $query) {

  //Feuille de presence ==> ne pas afficher les contact qui sont supprimés
  if ($view->storage->get('id') == 'attendance_sheet' && $view->current_display == 'attendance_sheet_edit') {
    $query->where[] =  array(
      'conditions' => array(
        array(
          'field' => 'civicrm_contact_civicrm_participant.is_deleted',
          'value' => 'false',
          'operator' => '=',
        ),
      ),
      'type' => 'AND',
    );
  }
}


/**
 *
 * Implements template_preprocess_media().
 */
function phenix_cfonb_group_preprocess_media(&$variables) {
  // Check if the media type is 'document'.
  if ($variables['media']->bundle() === 'document') {
    if ($variables['media']->hasField('field_media_document')) {
      // Load the file entity.
      $file = $variables['media']->get('field_media_document')->entity;
      // Check if the file is loaded.
      if ($file) {
        // Modify the file link.
        $file_uri = $file->getFileUri();
        $absolute_uri = file_create_url($file_uri);

        $file->setFileUri($absolute_uri);
        // Update the media variable with the modified file.
        $variables['media']->set('field_media_document', $file);
        
        // Add the absolute file URL to the variables array.
        // $variables['file_url'] = $absolute_uri;
      }
    }
  }
}

/**
 * Implements hook_views_data().
 */
function phenix_cfonb_group_views_data() {
  $data['views']['uid'] = [
    'title' => t('Employeur'),
    'help' => t('Displays custom data.'),
    'field' => [
      'id' => 'custom_field_1',
    ],
  ];
  return $data;
}


/**
 * Implements hook_views_post_build().
 */
function  phenix_cfonb_group_views_post_build(ViewExecutable $view) {
  // Check if this is the correct view and display.
  if ($view->id() == 'user_admin_people' /* && $view->current_display == 'default' */) {
    // Add the custom markup field.
    
   /*  $contacts = \Civi\Api4\Contact::get(FALSE)
      ->addSelect('employer_id.display_name')
      ->addWhere('id', '=', 12781)
      ->execute(); */



    $field = [
      'id' => 'custom_markup',
      'table' => 'views',
      'field' => 'nothing',
      'label' => 'Custom Markupfffff',
      'alter' => [
        'text' => '<div class="my-custom-markup">This is custom markup text</div>',
        'make_link' => FALSE,
        'alter_text' => TRUE,
        'word_boundary' => FALSE,
        'ellipsis' => FALSE,
        'strip_tags' => FALSE,
        'trim' => FALSE,
        'html' => TRUE,
      ],
      'element_type' => '',
      'element_class' => '',
      'empty' => '',
      'hide_alter_empty' => TRUE,
      'plugin_id' => 'field',
    ];
// dump($view->display_handler->options);
    // Add the field to the view display.
    $view->display_handler->options['fields']['custom_field'] = $field;
  }
}

/**
 * Implements hook_views_data_alter().
 */
function phenix_cfonb_group_views_data_alter(array &$data) {
  $data['views']['phase_filter'] = [
    'title' => t('Filtre par dernièr accès'),
    'filter' => [
      'title' => t('Filtre par dernièr accès'),
      'help' => t('Provides a custom filter for last access to the owner account.'),
      'field' => 'access',
      'id' => 'views_filter_last_access',// Expose the filter to users.
      'expose' => [
        'operator' => false, // Optional: Set to true to expose operator options.
        'label' => t('Last Access Filter'), // Label for the exposed filter.
        'identifier' => 'views_filter_last_access', // Unique identifier for the filter.
        'multiple' => false, // Set to true if the filter can accept multiple values.
        'reduce_duplicates' => false, // Optional: Reduce duplicate filter options.
      ],
    ],
  ];
}